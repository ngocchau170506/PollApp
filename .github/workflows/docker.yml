name: CI/CD Pipeline for PollApp

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Sử dụng GitHub-hosted runner mới nhất

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Kéo code từ repository về runner

      # Bước này thường không cần thiết nếu 'npm install' đã nằm trong Dockerfile
      # Nếu bạn muốn chạy test hoặc linting trước khi build Docker, hãy giữ lại.
      - name: Set up Node.js (Optional, if npm install is in Dockerfile)
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Bước này cũng thường không cần thiết nếu 'npm install' đã nằm trong Dockerfile
      # Nếu bạn muốn chạy test hoặc linting trước khi build Docker, hãy giữ lại.
      - name: Install dependencies (Optional, if npm install is in Dockerfile)
        run: npm install

      - name: Login to Docker Hub
        # Sử dụng action chính thức để đăng nhập Docker Hub
        uses: docker/login-action@v3 # Nên dùng phiên bản mới nhất (v3 hoặc cao hơn)
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Lấy username từ GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Lấy PAT từ GitHub Secrets

      - name: Build and Push Docker image
        # Sử dụng action này để build và push image trong một bước
        uses: docker/build-push-action@v5 # Nên dùng phiên bản mới nhất (v5 hoặc cao hơn)
        with:
          context: . # Build từ thư mục hiện tại
          push: true # Đẩy image lên Docker Hub
          # ĐẢM BẢO USERNAME VÀ TÊN REPO KHỚP CHÍNH XÁC VỚI DOCKER HUB
          tags: ${{ secrets.DOCKER_USERNAME }}/pollapp:latest # Tên image và tag

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master # Action để SSH và chạy lệnh trên EC2
        with:
          host: ${{ secrets.EC2_HOST }} # Lấy địa chỉ host từ GitHub Secrets
          username: ubuntu # Tên người dùng SSH trên EC2
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # Khóa SSH riêng tư từ GitHub Secrets
          script: |
            # Di chuyển đến thư mục dự án hoặc clone nếu chưa có
            # Sử dụng 'PollApp' vì đây là tên thư mục bạn đã làm việc
            PROJECT_DIR="/home/ubuntu/PollApp"
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Cloning repository to $PROJECT_DIR"
              git clone https://github.com/ngocchau170506/PollApp.git "$PROJECT_DIR"
            fi
            cd "$PROJECT_DIR"
            
            # Dừng và xóa các container cũ (sử dụng lệnh 'docker compose' mới)
            echo "Stopping and removing old containers..."
            docker compose down || true
            
            # Kéo (pull) Docker image mới nhất từ Docker Hub
            echo "Pulling new Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/pollapp:latest
            
            # Khởi động lại container với image mới (sử dụng lệnh 'docker compose' mới)
            echo "Starting new containers..."
            docker compose up -d
            
            # Dọn dẹp các image Docker không còn được sử dụng
            echo "Pruning unused Docker images..."
            docker image prune -f

      - name: Send notification
        # Bước này sẽ luôn chạy, dù job thành công hay thất bại
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Pipeline completed successfully! ✅"
            echo "Deployment ready for PollApp"
          else
            echo "Pipeline failed! ❌"
            echo "Please check the logs for issues"
          fi

      - name: Generate deployment report
        # Bước này chỉ chạy khi job thành công
        if: success()
        run: |
          echo "Deployment Report" > deployment-report.txt
          echo "===================" >> deployment-report.txt
          echo "Date: $(date)" >> deployment-report.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-report.txt
          echo "Commit: ${{ github.sha }}" >> deployment-report.txt
          echo "Author: ${{ github.actor }}" >> deployment-report.txt
          echo "Status: SUCCESS" >> deployment-report.txt
          echo "" >> deployment-report.txt
          echo "Image pushed to Docker Hub" >> deployment-report.txt
          echo "Deployed to EC2 successfully" >> deployment-report.txt
